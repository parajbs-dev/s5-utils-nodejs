"use strict";

/* istanbul ignore file */

// Main import.

// basetools import.
const {
  encodeBase58BTC,
  decodeBase58BTC,
  encodeBase32RFC,
  decodeBase32RFC,
  encodeBase64URL,
  decodeBase64URL,
} = require("./utils/basetools");

// blake3tools import.
const {
  calculateB3hashFromFile,
  generateMHashFromB3hash,
  extractB3hashFromMHash,
  generateCIDFromMHash,
  extractMHashFromCID,
  extractRawSizeFromCID,
  extractB3hashFromCID,
  convertMHashToB64url,
  convertS5CidToMHash,
  convertS5CidToCIDBytes,
  checkRawSizeIsNotNull,
  convertS5CidToMHashB64url,
  convertS5CidToB3hashHex,
  getAllInfosFromCid,
} = require("./utils/blake3tools");

// tools import.
const {
  numToBuf,
  bufToNum,
  encodeCIDWithPrefixZ,
  decodeCIDWithPrefixZ,
  encodeCIDWithPrefixU,
  decodeCIDWithPrefixU,
  encodeCIDWithPrefixB,
  decodeCIDWithPrefixB,
  convertB58btcToB32rfcCid,
  convertB32rfcToB58btcCid,
  convertB64urlToB58btcCid,
  convertB58btcToB64urlCid,
  convertB64urlToB32rfcCid,
  convertB32rfcToB64urlCid,
  convertDownloadDirectoryInputCid,
  addUrlSubdomain,
  getSubdomainFromUrl,
} = require("./utils/tools");

// file import.
const { getFileMimeType, } = require("./utils/file");

// url import.
const {
  defaultS5PortalUrl,
  uriS5Prefix,
  defaultPortalUrl,
  makeUrl,
} = require("./utils/url");

// utilsbox import.
const {
  defaultOptions,
  extractOptions,
  walkDirectory,
  getPublicKeyFromPrivateKey,
  formatCid,
  onUploadProgress,
} = require("./utils/utilsbox");

// constants import.
const {
  cidTypeRaw,
  cidTypeMetadataMedia,
  //  cidTypeMetadataFile,
  cidTypeMetadataWebApp,
  cidTypeResolver,
  cidTypeUserIdentity,
  cidTypeBridge,
  cidTypeEncrypted,
  registryS5MagicByte,
  mhashBlake3Default,
  mkeyEd25519,
  encryptionAlgorithmXChaCha20Poly1305,
  encryptionAlgorithmXChaCha20Poly1305NonceSize,
  metadataMagicByte,
  metadataTypeMedia,
  metadataTypeWebApp,
  metadataTypeDirectory,
  metadataTypeProofs,
  metadataTypeUserIdentity,
  parentLinkTypeUserIdentity,
  registryMaxDataSize,
  authPayloadVersion1,
  userIdentityLinkProfile,
  userIdentityLinkPublicFileSystem,
  protocolMethodHandshakeOpen,
  protocolMethodHandshakeDone,
  protocolMethodSignedMessage,
  //  protocolMethodHashQueryResponse,
  protocolMethodHashQuery,
  protocolMethodAnnouncePeers,
  //  protocolMethodRegistryUpdate,
  protocolMethodRegistryQuery,
  recordTypeStorageLocation,
  recordTypeRegistryEntry,
  //  metadataExtensionChildren,
  metadataExtensionLicenses,
  metadataExtensionDonationKeys,
  metadataExtensionWikidataClaims,
  metadataExtensionLanguages,
  metadataExtensionSourceUris,
  metadataExtensionUpdateCID,
  metadataExtensionPreviousVersions,
  metadataExtensionTimestamp,
  metadataExtensionTags,
  metadataExtensionCategories,
  metadataExtensionViewTypes,
  metadataExtensionBasicMediaMetadata,
  metadataExtensionBridge,
  metadataMediaDetailsDuration,
  metadataMediaDetailsIsLive,
  metadataProofTypeSignature,
  metadataProofTypeTimestamp,
  storageLocationTypeArchive,
  storageLocationTypeFile,
  storageLocationTypeFull,
  storageLocationTypeBridge,
} = require("./utils/constants");

// Main exports.

module.exports = {
  // ### basetools exports.
  encodeBase58BTC,
  decodeBase58BTC,
  encodeBase32RFC,
  decodeBase32RFC,
  encodeBase64URL,
  decodeBase64URL,
  // ### blake3tools exports.
  calculateB3hashFromFile,
  generateMHashFromB3hash,
  extractB3hashFromMHash,
  generateCIDFromMHash,
  extractMHashFromCID,
  extractRawSizeFromCID,
  extractB3hashFromCID,
  convertMHashToB64url,
  convertS5CidToMHash,
  convertS5CidToCIDBytes,
  checkRawSizeIsNotNull,
  convertS5CidToMHashB64url,
  convertS5CidToB3hashHex,
  getAllInfosFromCid,
  // ### tools exports.
  numToBuf,
  bufToNum,
  encodeCIDWithPrefixZ,
  decodeCIDWithPrefixZ,
  encodeCIDWithPrefixU,
  decodeCIDWithPrefixU,
  encodeCIDWithPrefixB,
  decodeCIDWithPrefixB,
  convertB58btcToB32rfcCid,
  convertB32rfcToB58btcCid,
  convertB64urlToB58btcCid,
  convertB58btcToB64urlCid,
  convertB64urlToB32rfcCid,
  convertB32rfcToB64urlCid,
  convertDownloadDirectoryInputCid,
  addUrlSubdomain,
  getSubdomainFromUrl,
  // ### file exports.
  getFileMimeType,
  // ### url exports.
  defaultS5PortalUrl,
  uriS5Prefix,
  defaultPortalUrl,
  makeUrl,
  // ### utilsbox exports.
  defaultOptions,
  extractOptions,
  walkDirectory,
  getPublicKeyFromPrivateKey,
  formatCid,
  onUploadProgress,
  // ### constants exports.
  cidTypeRaw,
  cidTypeMetadataMedia,
  //  cidTypeMetadataFile,
  cidTypeMetadataWebApp,
  cidTypeResolver,
  cidTypeUserIdentity,
  cidTypeBridge,
  cidTypeEncrypted,
  registryS5MagicByte,
  mhashBlake3Default,
  mkeyEd25519,
  encryptionAlgorithmXChaCha20Poly1305,
  encryptionAlgorithmXChaCha20Poly1305NonceSize,
  metadataMagicByte,
  metadataTypeMedia,
  metadataTypeWebApp,
  metadataTypeDirectory,
  metadataTypeProofs,
  metadataTypeUserIdentity,
  parentLinkTypeUserIdentity,
  registryMaxDataSize,
  authPayloadVersion1,
  userIdentityLinkProfile,
  userIdentityLinkPublicFileSystem,
  protocolMethodHandshakeOpen,
  protocolMethodHandshakeDone,
  protocolMethodSignedMessage,
  //  protocolMethodHashQueryResponse,
  protocolMethodHashQuery,
  protocolMethodAnnouncePeers,
  //  protocolMethodRegistryUpdate,
  protocolMethodRegistryQuery,
  recordTypeStorageLocation,
  recordTypeRegistryEntry,
  //  metadataExtensionChildren,
  metadataExtensionLicenses,
  metadataExtensionDonationKeys,
  metadataExtensionWikidataClaims,
  metadataExtensionLanguages,
  metadataExtensionSourceUris,
  metadataExtensionUpdateCID,
  metadataExtensionPreviousVersions,
  metadataExtensionTimestamp,
  metadataExtensionTags,
  metadataExtensionCategories,
  metadataExtensionViewTypes,
  metadataExtensionBasicMediaMetadata,
  metadataExtensionBridge,
  metadataMediaDetailsDuration,
  metadataMediaDetailsIsLive,
  metadataProofTypeSignature,
  metadataProofTypeTimestamp,
  storageLocationTypeArchive,
  storageLocationTypeFile,
  storageLocationTypeFull,
  storageLocationTypeBridge,
};
